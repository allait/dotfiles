" Vimrc

" Plug.vim plugin setup {{{1
" =====================

call plug#begin('~/.vim/bundle')

" Syntax and language support {{{2

Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-markdown'
Plug 'pangloss/vim-javascript'

Plug 'leafgarland/typescript-vim'

Plug 'guns/vim-clojure-static'
Plug 'tpope/vim-fireplace'
Plug 'jpalardy/vim-slime'

Plug 'hdima/python-syntax'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'tmhedberg/SimpylFold'
Plug 'davidhalter/jedi-vim'

Plug 'oscarh/vimerl'
Plug 'ElmCast/elm-vim'
Plug 'derekwyatt/vim-scala'
Plug 'hashivim/vim-terraform'
Plug 'tpope/vim-liquid'
Plug 'leshill/vim-json'
Plug 'ledger/vim-ledger'
Plug 'juvenn/mustache.vim'

Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" File and buffer management {{{2

Plug 'jlanzarotta/bufexplorer'
Plug 'vim-scripts/Rename'

Plug 'junegunn/fzf.vim'

" Completion and mappings {{{1

Plug 'ervandew/supertab'

Plug 'tpope/vim-surround'

Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

Plug 'tpope/vim-ragtag'
Plug 'mattn/emmet-vim'

Plug 'cohama/lexima.vim'

" Git {{{2

Plug 'tpope/vim-git'
Plug 'tpope/vim-fugitive'

" Test helpers {{{2

Plug 'w0rp/ale'

Plug 'rygwdn/vim-pylint'

Plug 'janko-m/vim-test'

" Other tools {{{2
Plug 'vim-scripts/TaskList.vim'
Plug 'tpope/vim-abolish'
Plug 'vim-scripts/matchit.zip'
Plug 'mileszs/ack.vim'
Plug 'vim-scripts/python_match.vim'
Plug 'tpope/vim-repeat'
Plug 'vim-scripts/scratch.vim'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-unimpaired'
Plug 'michaeljsmith/vim-indent-object'
Plug 'vim-scripts/ZoomWin'
Plug 'vim-scripts/VOoM'
Plug 'majutsushi/tagbar'
Plug 'allait/vimwiki'
Plug 'tpope/vim-commentary'
Plug 'sjl/gundo.vim'
Plug 'maxbrunsfeld/vim-yankstack'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-vinegar'
Plug 'guns/vim-sexp'
Plug 'Konfekt/FastFold'
Plug 'google/vim-searchindex'
Plug 'PeterRincker/vim-argumentative'

Plug 'itchyny/lightline.vim'

" Color themes {{{2

Plug 'altercation/vim-colors-solarized'

call plug#end()

" VIM global options {{{1
" ==================

" Don't timeout key sequences
set notimeout

" Timeout key codes (don't wait after Esc)
set ttimeout
set timeoutlen=10

" No vim compatibility
set nocompatible

" No bell sounds
set noerrorbells
set visualbell
set vb t_vb=""

" Enable xterm mouse support in all modes
set mouse=a

" Disable modeline for security reasons
set nomodeline

" Syntax options {{{1
" =======================

" Set syntax highlighting
syntax on

" Limit highlighting to x columns to increase speed with long lines
set synmaxcol=2048

" History and swap options {{{1
" ========================

"Set maximum undo levels
set undolevels=1000

" Swap files location
set directory=~/tmp/swap/
" Backup files directory
set backupdir=~/tmp/backup/

if has("persistent_undo")
    " Undo files directory
    set undodir=~/tmp/undo/
    " Enable undo file for persistent undo
    set undofile
    " Maximum number of lines to save for undo on buffer reload
    set undoreload=10000
endif

" Enable backups
set backup

" Store netrw file in ~/tmp/
let g:netrw_home= expand("$HOME/tmp")

" File options {{{1
" ============

" Set default file encoding to UTF-8
set encoding=utf-8

" Use UNIX (\n) line endings for new files
set fileformat=unix

" Enable filetype plugin
filetype plugin on

" Indent depending on filetype
filetype indent on

" Jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Viewport behavior options (buffers and windows) {{{1
" ===============================================

" Do not warn when switching from unsaved buffer
set hidden

" Autoreload file when changed outside of vim
set autoread

" Create new split window below the current one
set splitbelow

" Create vertical split window right of the current one
set splitright

" Search and Movement Options {{{1
" ==============

" Incremental search
set incsearch

" Highlight search results
set hlsearch

" Case-insensitive search
set ignorecase

" Case sensitive if search string contains uppercase letters
set smartcase

" Don't move on *
nnoremap <silent> * :let stay_star_view = winsaveview()<cr>*<c-o>:call winrestview(stay_star_view)<cr>

" Use Emacs C-A and C-E behavior in insert and command mode
inoremap <C-a> <Esc>I
inoremap <C-e> <Esc>A
cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" Don't skip wrap lines
nnoremap j gj
nnoremap k gk

" Show ↪ at the beginning of wrapped lines
let &showbreak = nr2char(8618)

" Formatting options {{{1
" ==================

" Configure autowrapping and auto comment leader insertion
set formatoptions=ctrqln

" Insert only one space when joining lines at sentence end
set nojoinspaces

" General view options {{{1
" ====================

" Show line numbers
set nu

" Don't highlight current line
" (highlighting slows down j/k on filetypes with slow syntax hl, e.g. ruby)
set nocursorline

" Highlight column
" set colorcolumn=85

" Set interface elements symbols
set fillchars=vert:│

" Show invisible symbols
set list
set listchars=tab:▸\ ",eol:¬

" Show current normal mode command
set showcmd

" Don't display line numbers
set nonumber

" Status line options {{{1
" ===================

" Always show statusline
set laststatus=2

" Status line
if has('statusline')
    set statusline=%<%f\  " Current file path
    set statusline+=%m%h%r%w " File flags - modified, help buffer, readonly, preview
    set statusline+=%y " Filetype
    set statusline+=%= " Indent to the right
    set statusline+=%-20.(%4.l/%L,\ %c%V\ [x%B]%)\  "Current line number/total, column number, byte code
    set statusline+=%P\  "Percentage through a file
    "set statusline+=[%{&fileformat}] " file format (unix/mac/win)
    set statusline+=[%{(&fenc==\"\"?&enc:&fenc)}]\  "File encoding
    set statusline+={%n} "Buffer number
endif

" Completion options {{{1
" ==================

" Enable menu at the bottom of vim window
set wildmenu
" Set menu behavior
set wildmode=list:longest,full

" Set competion menu behavior, preview window disabled
" Complete only common letters among possible completions, not the while first
" option
set completeopt=menu,longest ",preview

" Autohide preview window after selection
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif

" Racket is scheme, and we have only syntax completion for scheme
au BufRead,BufNewFile *.rkt set filetype=scheme

" When doing tab completion, give the following files lower priority
set suffixes+=.info,.aux,.log,.dvi,.bbl,.out,.o,.loi,.pyc

" Exclude files from listing
set wildignore+=*.aux,*.out,*.toc " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg,*.ico " binary images
set wildignore+=*.pyc,*.luac,*.beam " byte code
set wildignore+=*.o,*.obj,*.manifest " compiled object files
set wildignore+=.DS_Store " system files

" Using chicken scheme
let g:is_chicken = 1

" Indentation and tab options {{{1
" ===========================

" Always convert tabs to spaces
set expandtab

" Use shiftwidth value for softtabstop
set smarttab

" What to use for an >> and << indent.
set shiftwidth=4

" Round indent to multiple of shiftwidth
set shiftround

" Keep indentation level from previous line
set autoindent

" Folding options {{{1
" ===============

" Folding based on indentation:
set foldmethod=indent

" Open all folds in new buffer
au BufRead * normal zR

" General keymappings {{{1
" ===================

" Set map leaders
let mapleader = ","
let maplocalleader = "\\"

" Reset highlighting
nmap <leader><Space> :nohlsearch<CR>

" Jump to previous buffer with Q
noremap <silent>Q <C-^>

" Jump between opening/closing pair with Tab
noremap <Tab> %

" Since <Tab> == <C-i>, bind jumplist forward to <C-n>
nnoremap <C-n> <C-i>

" Make Y behave like others do
nnoremap Y y$

" Toggle folds with Space
nnoremap <Space> za
vnoremap <Space> za

" Search current visual selection with //
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>

" Switch fold method with ,zs and ,zm
noremap <leader>zs :set foldmethod=syntax<CR>
noremap <leader>zm :set foldmethod=marker<CR>
noremap <leader>zi :set foldmethod=indent<CR>

" Yank to system clipboard
vmap <leader>y "*y
noremap <leader>y "*y

" Paste from system clipboard
vmap <leader>p "*p
vmap <leader>P "*P
noremap <leader>p "*p
noremap <leader>P "*P

" Use <M-CR> to continue current line
imap <M-CR> \<CR>

" Use <C-q> in GUI and <C-c> in shell as prefix for personal commands
nmap <C-q> <C-c>
vmap <C-q> <C-c>

" Set backspace behavior
set backspace=indent,eol,start

" Clean whitespace
map <C-c>w mw:%s/\s\+$//<cr>:let @/=''<CR>`w

" Call par reformater on paragraph with textwidth 100
map <C-c>f {v}!par w100<CR>

" Call par reformater on selection with textwidth 100
vmap <C-c>f !par w100<CR>

nnoremap <C-c>t :silent !/usr/local/bin/ctags -R .<CR><C-L>

" Show the name of highlightning group under cursor - usefull for syntax theme
" editing
nmap <silent> <C-F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name")
     \ . '> trans<' . synIDattr(synID(line("."),col("."),0),"name")
     \ . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name")
     \ . ">"<CR>h

" Disable F1
nnoremap <F1> <nop>

" Navigate lists with arrows
nnoremap <left>  :cprev<cr>zvzz
nnoremap <right> :cnext<cr>zvzz
nnoremap <up>    :lprev<cr>zvzz
nnoremap <down>  :lnext<cr>zvzz

" Helper commands {{{1
" ===============

" Sudo to save file
command! Sudow w !sudo tee % >/dev/null

" Color and gui options {{{1
" =====================

" Set gui-specific options
if has("gui_running")
    " Set color scheme
    colorscheme prefect
    " Disable toolbar
    set guioptions-=T
    " Disable left scrollbar
    set guioptions-=l
    set guioptions-=L
    " Disable right scrollbar
    set guioptions-=r
    set guioptions-=R
    " Disable bottom scrollbar
    set guioptions-=b
    " Set gui window size
    set lines=80 columns=100
else
    " Set color scheme
    set background=light
    colorscheme solarized
endif

" Stretch window in fullscreen mode
if has("gui_macvim")
   set fuoptions=maxvert,maxhorz
endif

" Default statusline color when entering Vim
hi statusline ctermbg=253 guibg=#e0e0e0

" Change status line color in insert mode
if has("autocmd")
  au InsertEnter * hi StatusLine ctermbg=38 guibg=#6ac3d8
  au InsertLeave * hi StatusLine ctermbg=253 guibg=#e0e0e0
endif

" Specific highlight options {{{1
" ==========================

" Highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

fun! s:MatchBadWhitespace(current)
    if exists('b:hide_bad_whitespace')
        match none
        return
    endif
    if a:current
        match BadWhitespace /\s\+$/
    else
        match BadWhitespace /\s\+\%#\@<!$/
    endif
endfun

augroup WhitespaceMatch
    " Highlight whitespace on open buffer
    autocmd BufWinEnter * call s:MatchBadWhitespace(1)
    " Don't highlight while typing
    autocmd InsertEnter * call s:MatchBadWhitespace(0)
    autocmd InsertLeave * call s:MatchBadWhitespace(1)
    " Clear match when leaving buffer to avoid memory leaks
    autocmd BufWinLeave * call clearmatches()
augroup END

" Netrw options {{{1
" =============

" Disable netrw banner
let g:netrw_banner=0

" Disable mouse maps
let g:netrw_mousemaps=0

" Plugin-specific settings {{{1
" ========================

" Pylint {{{2
" ------

" Disable onwrite pylint checks
let g:pylint_onwrite = 0

" TagBar {{{2
" ------
" Bind show/hide tag list
nmap <silent><leader>t :TagbarToggle<CR>

" Additional filetype support
let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : ['h:headings'],
    \ 'sort' : 0}

" Show Tagbar window on the left
let g:tagbar_left = 1

" Set tagbar window width
let g:tagbar_width = 30

" Change focus to Tagbar on open
let g:tagbar_autofocus = 1

" Don't sort tags by name
let g:tagbar_sort = 0

" Don't show help line
let g:tagbar_compact = 1

" TaskList {{{2
" --------
" Bind ,T to show tasklist
nmap <silent><leader>T <Plug>TaskList


" FZF {{{2
" ---------

" Add a prefix to all commands
let g:fzf_command_prefix = 'Fzf'

" ,e to search for file name
nmap <silent><leader>e :FzfGFiles<CR>

" ,q to search for buffer name
nmap <silent><leader>q :FzfBuffers<CR>

" Search for tag in open buffer
nmap <silent><leader>A :FzfBTags<CR>

" Search for tag in generated tags file
nmap <silent><leader>r :FzfTags<CR>

" SuperTab {{{2
" --------

" Set supertab to complete depending on text before cursor
let g:SuperTabDefaultCompletionType="context"

" Use custom context function from autoload/completion
let g:SuperTabCompletionContexts = ['completion#ExtendedContextText']

" Set backwards mapping to work with snipmate's reverse tabstops
let g:SuperTabMappingBackward ='<C-Tab>'

" Disable cr to fix conflict with delimitmate
let g:SuperTabCrMapping = '<C-CR>'

" ALE {{{2
" ---------

" Only run on file save
let g:ale_lint_on_text_changed = 'never'

function! g:ToggleLocList()
    redir =>buflist
    silent! ls
    redir END
    for bufnum in filter(split(buflist, '\n'), 'v:val =~ "Location List"')
        lclose
        return
    endfor
   lopen
endfunction


" Bind loclist toggle to hotkey
nmap <silent> <leader>E :call g:ToggleLocList()<CR>

" Gundo {{{2
" -----
nmap <silent><leader>u :GundoToggle<CR>

" Fix gundo with python3 interpreter
let g:gundo_prefer_python3 = 1

" BufExplorer {{{2
" -----------

" Disable default mappings
let g:bufExplorerDisableDefaultKeyMapping = 1

" Map to ,b
nnoremap <silent><leader>b :BufExplorer<CR>

" Disable help string
let g:bufExplorerDefaultHelp=0

" Show paths relative to the current directory
let g:bufExplorerShowRelativePath=1

" Ropevim {{{2
" -------

" Change prefixes to <C-c>
let g:ropevim_local_prefix = "<C-c>r"
let g:ropevim_global_prefix = "<C-c>p"

" Disable shorcuts
let g:ropevim_enable_shortcuts = 0

" Python syntax {{{2
" -------------

" Python full highlighting
let g:python_highlight_all = 1
let g:python_version_2 = 1

" Highlight print as keyword
let g:python_print_as_function = 0


" VimErl {{{2
" ------
let g:erlangCompletionDisplayDoc = 0

" UltiSnips {{{2
" ---------

" Set jump forward key
let g:UltiSnipsJumpForwardTrigger = "<Tab>"

" Set jump backward key
let g:UltiSnipsJumpBackwardTrigger = "<S-Tab>"

" List all available snippets
let g:UltiSnipsListSnippets = "<F1>"

" Set UltiSnips edit snippet directory
let g:UltiSnipsSnippetsDir = '~/.vim/usnippets'

" Set UltiSnips folder names
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "usnippets"]

" Use hardtabs in snippets for agile sw handling
au FileType snippets setl noexpandtab

" Vimwiki {{{2
" -------

" Default wiki with .md files and vimwiki_markdown syntax file
let g:vimwiki_list = [{'path': '~/wiki', 'ext': '.md', 'syntax':'markdown'}]

" Use markdown filetype for files outside wiki path
let g:vimwiki_global_ext = 0

" Highlight headers
let g:vimwiki_hl_headers = 1

" Use Mac OS X `open` for external links
let g:vimwiki_browsers = ['open']

" Enable ctags markdown headers listing
let g:tlist_vimwiki_settings = 'markdown;h:Headers'

" Set up folding
let g:vimwiki_folding = 1
let g:vimwiki_fold_lists = 1

" Disable Tab mapping for table formatting
let g:vimwiki_table_auto_fmt = 0

" Disable wikiwords
let g:vimwiki_camel_case = 0

" Slime {{{2
" -----

" Use tmux instead of screen
let g:slime_target = "tmux"

" Use IPython cpaste
let g:slime_python_ipython = 1

" lexima {{{2
" ----------

" Don't autoclose in front of a word or quote
call lexima#add_rule({'at': '\%#[-a-zA-Z0-9_.,=+*\''"([{]', 'char': '('})
call lexima#add_rule({'at': '\%#[-a-zA-Z0-9_.,=+*\''"([{]', 'char': '['})
call lexima#add_rule({'at': '\%#[-a-zA-Z0-9_.,=+*\''"([{]', 'char': '{'})
call lexima#add_rule({'at': '\%#[-a-zA-Z0-9_.,=+*\"]', 'char': ''''})
call lexima#add_rule({'at': '\%#[-a-zA-Z0-9_.,=+*\'']', 'char': '"'})

" Don't ever autoclose `
call lexima#add_rule({'at': '\%#', 'char': '`'})

" YankStack {{{2
" --------

" Initialize yankstack mappings before surround
call yankstack#setup()

" Cycle through yank history with <C-p>
nmap <C-p> <Plug>yankstack_substitute_older_paste

" Dispatch {{{2
" --------

" Run async command with ,d
nmap <leader>d :Dispatch!

" Vim-sexp {{{2
" -------

" Disable insert mode maps
let g:sexp_enable_insert_mode_mappings = 0

" Don't enter insert mode
let g:sexp_insert_after_wrap = 0

" Emmet {{{2
" -----

" Use <C-c>e for expansion
let g:user_emmet_expandabbr_key = "<C-c>e"

" Vim-test {{{2
" --------

" let test#strategy = "dispatch"

" Run nearest test with ,,
map <leader>, :TestNearest<CR>

" Run file tests with ,f
map <leader>f :TestFile<CR>


" Vim-ack {{{2
" -------

" Set ag as the :Ack executable
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

" Search the word under cursor
nnoremap <Leader>a :Ack! <cword><cr>

" Use dispatch to run search in the background
" let g:ack_use_dispatch = 1

" Vim commentary {{{2
" --------------

" Restore deprecated commentary mappings
xmap \\  <Plug>Commentary<CR>
nmap \\  <CR><Plug>Commentary
nmap \\\ <Plug>CommentaryLine<CR>


" Fugitive {{{2
" --------

nmap <leader>s :Gdiff

" Neovim settings {{{1
" ===============

" Always use global system python packages (with neovim installed)
let g:loaded_python_provider = 1
let g:python_host_skip_check = 1
let g:python_host_prog='/usr/local/bin/python'

let g:python3_host_skip_check = 1
let g:python3_host_prog = '/usr/local/bin/python3'
