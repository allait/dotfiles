##############################
# Function and Class Snippets #
##############################

snippet def "Simple Function snippet" !b
def ${1:fname}(${2:`!p
if not getattr(snip, "indent_level", 0):
    snip.indent_level=vim.eval("indent('.')")
snip.rv = "self" if int(snip.indent_level) else ""
`}):
	"""${3:TODO Docstring for $1}."""
	${4:pass}
endsnippet

snippet class "Simple class" !b
class ${1:MyClass}(${2:object}):
	"""${3:TODO Docstring for $1}."""

	def __init__(self$4):
		${5:pass}
endsnippet

##################
# Other snippets #
##################

# Module Docstring
snippet docs "Module docstring" b
"""
File: ${1:`!p snip.rv = fn`}
Author: ${2:Author}
Description: ${3}

"""
$0
endsnippet

# Loops
snippet while "While loop" b
while ${1:True}:
	${2:pass}
endsnippet

snippet for "For loop" b
for ${1:item} in ${2:xrange(${3:10})}:
	${4:pass}
endsnippet

snippet with "Context manager" b
with ${1:open(${2:file})} as ${3:f}:
	${4:pass}
endsnippet

snippet super "Create super object" b
super(${1:ClassName}, ${2:self}).$0
endsnippet

snippet "" "Triple double quotes" b
"""$0
"""
endsnippet

snippet '' "Triple quotes" b
'''$0
'''
endsnippet
